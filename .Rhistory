## Sixth step: return inverse matrix
m
}
makeCacheMatrix(x)
cacheSolve(x, ...)
cacheSolve(x)
cacheSolve(x, makeCacheMatrix)
x = rbind(c(1, -1/4), c(-1/4, 1))
## Presentation
## Given that matrix inversion is usually a costly computation, I propose two functions that allow caching the inverse of a matrix instead of compute it
## repeatedly. The first one is called makeCacheMatrix, and the second is named cacheSolve.
## The "makeCacheMatrix" function creates in five steps a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
##First step: setting the value of a matrix.
set <- function(y) {
x <<- y
m <<- NULL
}
##Second step: getting the value of the matrix
get <- function() x
##Third step: setting the value of the inverse of the matrix
setinverse<- function(solve) m <<- solve
##Fourth step: getting the inverse of the matrix
getinverse <- function() m
##Fifth step: returning the list
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## The "cachesolve" function returns in six steps the inverse of 'x', the "special" matrix created by the makeCacheMatrix function defined above. If the inverse has already been calculated (and the matrix has not changed), then the "cachesolve" function should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## First:retrieve inverse matrix from cache
m <- x$getinverse()
## Second: if the inverse matrix was retrieved from cache, return it to caller
if(!is.null(m)) {
message("Getting cached data!")
return(m)
}
## Third step: if there is not an inverse matrix to retrieve from cache, then get the value of the matrix
data <- m$get()
##Fourth step: solve the value of the inverse of the matrix
m <- solve(data, ...)
##Fifth step: set the value of the inverse of the matrix
x$setinverse(m)
## Sixth step: return inverse matrix
m
}
makeCacheMatrix(x)
cacheSolve(x)
cacheSolve(m)
cacheSolve(x, ...)
cacheSolve(x, ...)
c = rbind(c(1, -1/4), c(-1/4, 1))
## Presentation
## Given that matrix inversion is usually a costly computation, I propose two functions that allow caching the inverse of a matrix instead of compute it
## repeatedly. The first one is called makeCacheMatrix, and the second is named cacheSolve.
## The "makeCacheMatrix" function creates in five steps a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
c.matrix<-x
i.matrix <- NULL
##First step: setting the value of a matrix.(Where c.matrix stands for cached matrix and i.matrix for inverse matrix)
set <- function(x) {
c.matrix <<- x
i.matrix <<- NULL
}
##Second step: getting the value of the matrix
get <- function() c.matrix
##Third step: setting the value of the inverse of the matrix
setinverse<- function(solve) i.matrix <<- solve
##Fourth step: getting the inverse of the matrix
getinverse <- function() c.matrix
##Fifth step: returning the list
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## The "cachesolve" function returns in six steps the inverse of 'x', the "special" matrix created by the makeCacheMatrix function defined above. If the inverse has already been calculated (and the matrix has not changed), then the "cachesolve" function should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## First:retrieve inverse matrix from cache
m <- i.matrix$getinverse()
## Second: if the inverse matrix was retrieved from cache, return it to caller
if(!is.null(m)) {
message("Getting cached data!")
return(m)
}
## Third step: if there is not an inverse matrix to retrieve from cache, then get the value of the matrix
data <- c.matrix$get()
##Fourth step: solve the value of the inverse of the matrix
m <- solve(data, ...)
##Fifth step: set the value of the inverse of the matrix
x$setinverse(m)
## Sixth step: return inverse matrix
m
}
makeCacheMatrix(x)
cacheSolve(x, ...)
cacheSolve(x)
cacheSolve(x,)
## Presentation
## Given that matrix inversion is usually a costly computation, I propose two functions that allow caching the inverse of a matrix instead of compute it
## repeatedly. The first one is called makeCacheMatrix, and the second is named cacheSolve.
## The "makeCacheMatrix" function creates in five steps a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
c.matrix<-x
c.i.matrix <- NULL
##First step: setting the value of a matrix.(Where c.matrix stands for cached matrix and c.i.matrix for cached inverse matrix)
set <- function(x) {
c.matrix <<- x
c.i.matrix <<- NULL
}
##Second step: getting the value of the matrix
get <- function() c.matrix
##Third step: setting the value of the inverse of the matrix
setinverse<- function(solve) c.i.matrix <<- solve
##Fourth step: getting the inverse of the matrix
getinverse <- function() c.i.matrix
##Fifth step: returning the list
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## The "cachesolve" function returns in six steps the inverse of 'x', the "special" matrix created by the makeCacheMatrix function defined above. If the inverse has already been calculated (and the matrix has not changed), then the "cachesolve" function should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## First:retrieve inverse matrix from cache
solve <- c.matrix$getinverse()
## Second: if the inverse matrix was retrieved from cache, return it to caller
if(is.null(solve)) {
message("No cached inversed matrix")
solve<-(c.matrix$get(),...)
c.matrix$setinverse(solve)
} else
message("Getting cached data")
return(solve)
}
## Presentation
## Given that matrix inversion is usually a costly computation, I propose two functions that allow caching the inverse of a matrix instead of compute it
## repeatedly. The first one is called makeCacheMatrix, and the second is named cacheSolve.
## The "makeCacheMatrix" function creates in five steps a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
c.matrix<-x
c.i.matrix <- NULL
##First step: setting the value of a matrix.(Where c.matrix stands for cached matrix and c.i.matrix for cached inverse matrix)
set <- function(x) {
c.matrix <<- x
c.i.matrix <<- NULL
}
##Second step: getting the value of the matrix
get <- function() c.matrix
##Third step: setting the value of the inverse of the matrix
setinverse<- function(solve) c.i.matrix <<- solve
##Fourth step: getting the inverse of the matrix
getinverse <- function() c.i.matrix
##Fifth step: returning the list
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## The "cachesolve" function returns in six steps the inverse of 'x', the "special" matrix created by the makeCacheMatrix function defined above. If the inverse has already been calculated (and the matrix has not changed), then the "cachesolve" function should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## First:retrieve inverse matrix from cache
solve <- c.matrix$getinverse()
## Second: if the inverse matrix was retrieved from cache, return it to caller
if(is.null(solve)) {
message("No cached inversed matrix")
solve<-(c.matrix$get(),...)
c.matrix$setinverse(solve)
} else
message("Getting cached data")
return(solve)
}
## Presentation
## Given that matrix inversion is usually a costly computation, I propose two functions that allow caching the inverse of a matrix instead of compute it
## repeatedly. The first one is called makeCacheMatrix, and the second is named cacheSolve.
## The "makeCacheMatrix" function creates in five steps a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
c.matrix<-x
c.i.matrix <- NULL
##First step: setting the value of a matrix.(Where c.matrix stands for cached matrix and c.i.matrix for cached inverse matrix)
set <- function(x) {
c.matrix <<- x
c.i.matrix <<- NULL
}
##Second step: getting the value of the matrix
get <- function() c.matrix
##Third step: setting the value of the inverse of the matrix
setinverse<- function(solve) c.i.matrix <<- solve
##Fourth step: getting the inverse of the matrix
getinverse <- function() c.i.matrix
##Fifth step: returning the list
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## The "cachesolve" function returns in six steps the inverse of 'x', the "special" matrix created by the makeCacheMatrix function defined above. If the inverse has already been calculated (and the matrix has not changed), then the "cachesolve" function should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## First:retrieve inverse matrix from cache
solve <- c.matrix$getinverse()
## Second: if the inverse matrix was retrieved from cache, return it to caller
if(is.null(solve)) {
message("No cached inversed matrix")
solve<-(c.matrix$get()...)
c.matrix$setinverse(solve)
} else {
message("Getting cached data")
return(solve)
}
## Presentation
## Given that matrix inversion is usually a costly computation, I propose two functions that allow caching the inverse of a matrix instead of compute it
## repeatedly. The first one is called makeCacheMatrix, and the second is named cacheSolve.
## The "makeCacheMatrix" function creates in five steps a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
c.matrix<-x
c.i.matrix <- NULL
##First step: setting the value of a matrix.(Where c.matrix stands for cached matrix and c.i.matrix for cached inverse matrix)
set <- function(x) {
c.matrix <<- x
c.i.matrix <<- NULL
}
##Second step: getting the value of the matrix
get <- function() c.matrix
##Third step: setting the value of the inverse of the matrix
setinverse<- function(solve) c.i.matrix <<- solve
##Fourth step: getting the inverse of the matrix
getinverse <- function() c.i.matrix
##Fifth step: returning the list
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
x = rbind(c(1, -1/4), c(-1/4, 1))
makeCacheMatrix(x)
## The "cachesolve" function returns in six steps the inverse of 'x', the "special" matrix created by the makeCacheMatrix function defined above. If the inverse has already been calculated (and the matrix has not changed), then the "cachesolve" function should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## First:retrieve inverse matrix from cache
solve <- c.matrix$getinverse()
## Second: if the inverse matrix was retrieved from cache, return it to caller
if(is.null(solve)) {
message("No cached inversed matrix")
solve<-(c.matrix$get()...)
c.matrix$setinverse(solve)
} else {}
message("Getting cached data")
return(solve)
}
## The "cachesolve" function returns in six steps the inverse of 'x', the "special" matrix created by the makeCacheMatrix function defined above. If the inverse has already been calculated (and the matrix has not changed), then the "cachesolve" function should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## First:retrieve inverse matrix from cache
solve <- c.matrix$getinverse()
## Second: if the inverse matrix was retrieved from cache, return it to caller
if(is.null(solve)) {
message("No cached inversed matrix")
solve<-(c.matrix$get()...)
c.matrix$setinverse(solve)
} else {}
message("Getting cached data")
return(solve)
}
## Presentation
## Given that matrix inversion is usually a costly computation, I propose two functions that allow caching the inverse of a matrix instead of compute it
## repeatedly. The first one is called makeCacheMatrix, and the second is named cacheSolve.
## The "makeCacheMatrix" function creates in five steps a special "matrix" (which is actually a list) that contains a function to cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
##First step: setting the value of a matrix
set <- function(y) {
x <<- y
m <<- NULL
}
##Second step: getting the value of the matrix
get <- function() x
##Third step: setting the value of the inverse of the matrix
setinverse<- function(solve) m <<- solve
##Fourth step: getting the value of the inverse of the matrix
getinverse <- function() m
##Fifth step: returning the "special" matrix (a list)
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## The "cachesolve" function returns in six steps the inverse of 'x', the "special" matrix (which is actually a list) created by the "makeCacheMatrix" function defined above. If the inverse has already been calculated (and the matrix has not changed), then the "cachesolve" function should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## First:retrieve inverse matrix from cache
m <- x$getinverse()
## Second: if the inverse matrix was retrieved from cache, return it to caller
if(!is.null(m)) {
message("Getting cached data")
return(m)
}
## Third step: if there is not an inverse matrix to retrieve from cache, then get the value of the matrix
data <- x$get()
##Fourth step: solve the value of the inverse of the matrix
m <- solve(data, ...)
##Fifth step: set the value of the inverse of the matrix
x$setinverse(m)
## Sixth step: return inverse matrix
m
}
mymat <- matrix(c(1,0,5,2,1,6,3,4,0), nrow=3, ncol=3)
mcm <- makeCacheMatrix(mymat)
cacheSolve(mcm)
R.version.string
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
z,555,z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
c(1,2,3,4)+c(0,10,1000)
z*2+1000
my_sqrt
my_div
1:20
pi:10
15:1
':'
?:
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,lenght=30)
my_seq<-seq(5,10,lenght=30)
my_seq<-seq(5,10,30)
my_seq<-seq(5,10,length=30)
length(my_seq)
length(my_seq)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
swirl()
library(swirl)
swirl()
num_vect<-c(0.5,55,-10,6)
tf=num_vect<1
tf<-num_vect<1
tf
num_vect>=6
my_char<-("My", "name", "is")
my_char<-c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name<-(my_char, "Carlos")
my_name<-c(my_char, "Carlos")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, C("X", "Y", "Z"), sep = "")
paste(1:3, ("X", "Y", "Z"), sep = "")
paste(c(1:3), c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep="-")
library(swirl)
swirl()
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect<-c(foo=11, bar= 2, norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo", "bar", "norf")
indentical(vect, vect2)
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector<-(1:20)
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-(1:20, 4, 5)
my_matrix2<-(1:20, "4", "5")
my_matrix2<-[1:20, 4, 5]
my_matrix2<-matrix(1:20, 4, 5)
identical (my_matrix, my_matrix2)
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data)<-cnames
my_data
data<-read.table("household_power_consumption.txt")
head(data)
data<-read.table("household_power_consumption.txt", header=TRUE)
head(data)
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip", temp)
data <- read.csv2(unz(temp, "household_power_consumption.txt"))
unlink(temp)
data[, 1] = as.Date(data[, 1], '%d/%m/%Y')
subset = data[as.Date('2007-02-01') <= data$Date, ]
subset = subset[subset$Date <= as.Date('2007-02-02'), ]
png("plot3.png", height=480, width=480)
plot(subset$DateTime,
subset$Sub_metering_1,
xlab=" ",
pch=NA,
ylab="Energy sub metering")
plot(subset$DateTime,
subset$Sub_metering_1,
xlab="",
pch=NA,
ylab="Energy sub metering")
plot(subset$DateTime,
subset$Sub_metering_1,
xlab="",
pch=NA,
ylab="")
png("plot3.png", height=480, width=480)
plot(subset$datetime, subset$Sub_metering_1, type="l",
ylab="Energy sub metering", xlab="")
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip", temp)
data <- read.csv2(unz(temp, "household_power_consumption.txt"))
unlink(temp)
valid.dates <- c("1/2/2007", "2/2/2007")
power.data <- subset(data, Date %in% valid.dates)
power.data$datetime <- paste(power.data$Date, power.data$Time)
power.data$datetime <- paste(power.data$Date, power.data$Time)
power.data$datetime <- strptime(power.data$datetime, "%d/%m/%Y %R")
png("plot3.png",type="quartz")
png("plot3.png",type="windows")
plot(power.data$datetime, power.data$Sub_metering_1, type="l",
ylab="Energy sub metering", xlab="")
lines(power.data$datetime, power.data$Sub_metering_2, type="l", col="red")
# Add Sub_metering_3 data
lines(power.data$datetime, power.data$Sub_metering_3, type="l", col="blue")
# Add Legend
legend("topright", legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
col=c("black","red","blue"), lwd=1)
# Close the device and create the PNG file
dev.off()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
install.packages("ggplot2")
library(datasets)
data(airquality)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
install.packages("markdown")
install.packages("knitr")
install.packages("slidify")
install.packages("C:/Users/Usuario/Downloads/slidify_0.3.1.zip", repos = NULL)
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl, destfile = "Dataset.zip", method = "curl")
download.file(fileUrl, destfile = "Dataset.zip")
install.packages("scales")
install.packages("plyr")
setwd("~/RepData_PeerAssessment1")
